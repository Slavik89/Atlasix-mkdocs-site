{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"#codeblocks","title":"Codeblocks","text":"<p>Some <code>code</code> goes here.</p>"},{"location":"#code-for-python","title":"Code for python","text":"<p>Some more code with the <code>py</code> at the start:</p> <pre><code>Some code here\ndef myfunction()\n// some comment\n</code></pre>"},{"location":"#code-for-yaml","title":"Code for yaml","text":"<p>Some more code with the <code>yaml</code> at the start:</p> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)\n</code></pre>"},{"location":"#emoji","title":"Emoji","text":"<ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"getting-started/","title":"Getting started","text":"<p>Material for MkDocs is a powerful documentation framework on top of MkDocs, a static site generator for project documentation.<sup>1</sup> If you're familiar with Python, you can install Material for MkDocs with <code>pip</code>, the Python package manager. If not, we recommend using <code>docker</code>.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#with-pip","title":"with pip recommended","text":"<p>Material for MkDocs is published as a Python package and can be installed with <code>pip</code>, ideally by using a virtual environment. Open up a terminal and install Material for MkDocs with:</p> <p>=== \"Latest\"</p> <pre><code>``` sh\npip install mkdocs-material\n```\n</code></pre> <p>=== \"9.x\"</p> <pre><code>``` sh\npip install mkdocs-material==\"9.*\" # (1)!\n```\n\n1.  Material for MkDocs uses [semantic versioning][^2], which is why it's a\n    good idea to limit upgrades to the current major version.\n\n    This will make sure that you don't accidentally [upgrade to the next\n    major version], which may include breaking changes that silently corrupt\n    your site. Additionally, you can use `pip freeze` to create a lockfile,\n    so builds are reproducible at all times:\n\n    ```\n    pip freeze &gt; requirements.txt\n    ```\n\n    Now, the lockfile can be used for installation:\n\n    ```\n    pip install -r requirements.txt\n    ```\n</code></pre> <p>This will automatically install compatible versions of all dependencies: MkDocs, Markdown, Pygments and Python Markdown Extensions. Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately.</p> <p> How to set up Material for MkDocs by @james-willett \u2013  15m \u2013 Learn how to create and host a documentation site using Material for MkDocs on GitHub Pages in a step-by-step guide.</p> <p>Tip</p> <p>If you don't have prior experience with Python, we recommend reading Using Python's pip to Manage Your Projects' Dependencies, which is a really good introduction on the mechanics of Python package management and helps you troubleshoot if you run into errors.</p>"},{"location":"getting-started/#with-docker","title":"with docker","text":"<p>The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Open up a terminal and pull the image with:</p> <p>=== \"Latest\"</p> <pre><code>```\ndocker pull squidfunk/mkdocs-material\n```\n</code></pre> <p>=== \"9.x\"</p> <pre><code>```\ndocker pull squidfunk/mkdocs-material:9\n```\n</code></pre> <p>The <code>mkdocs</code> executable is provided as an entry point and <code>serve</code> is the default command. If you're not familiar with Docker don't worry, we have you covered in the following sections.</p> <p>The following plugins are bundled with the Docker image:</p> <ul> <li>mkdocs-minify-plugin</li> <li>mkdocs-redirects</li> </ul> How to add plugins to the Docker image? <p>Material for MkDocs only bundles selected plugins in order to keep the size of the official image small. If the plugin you want to use is not included, you can add them easily:</p> <p>=== \"Material for MkDocs\"</p> <pre><code>Create a `Dockerfile` and extend the official image:\n\n``` Dockerfile title=\"Dockerfile\"\nFROM squidfunk/mkdocs-material\nRUN pip install mkdocs-macros-plugin\nRUN pip install mkdocs-glightbox\n```\n</code></pre> <p>=== \"Insiders\"</p> <pre><code>Clone or fork the Insiders repository, and create a file called\n`user-requirements.txt` in the root of the repository. Then, add the\nplugins that should be installed to the file, e.g.:\n\n``` txt title=\"user-requirements.txt\"\nmkdocs-macros-plugin\nmkdocs-glightbox\n```\n</code></pre> <p>Next, build the image with the following command:</p> <pre><code>docker build -t squidfunk/mkdocs-material .\n</code></pre> <p>The new image will have additional packages installed and can be used exactly like the official image.</p>"},{"location":"getting-started/#with-git","title":"with git","text":"<p>Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version:</p> <pre><code>git clone https://github.com/squidfunk/mkdocs-material.git\n</code></pre> <p>Next, install the theme and its dependencies with:</p> <pre><code>pip install -e mkdocs-material\n</code></pre> <ol> <li> <p>In 2016, Material for MkDocs started out as a simple theme for MkDocs, but over the course of several years, it's now much more than that \u2013 with the many built-in plugins, settings, and countless customization abilities, Material for MkDocs is now one of the simplest and most powerful frameworks for creating documentation for your project.\u00a0\u21a9</p> </li> <li> <p>Note that improvements of existing features are sometimes released as patch releases, like for example improved rendering of content tabs, as they're not considered to be new features.\u00a0\u21a9</p> </li> </ol>"},{"location":"markdown_extensions/","title":"Admonitions","text":"<p>Admonitions, also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several different types of admonitions and allows for the inclusion and nesting of arbitrary content.</p> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"setup/","title":"Setup","text":"<p>Material for MkDocs offers a wide range of options for customizing your documentation. In this section, we will explain how you can create a meaningful structure for your site, change the look and feel, add a blog and comment system, and build a highly optimized site.</p>"},{"location":"setup/#site-structure","title":"Site structure","text":"<p>Set up and customize the structure of your documentation by configuring the header and footer to your taste, choosing among many modes of navigation, setting up site search, and more.</p> <ul> <li> Language \u2013 Choose out of the 60+ supported languages or add a new one</li> <li> Navigation \u2013 Create a clear, concise, and comprehensive navigation structure</li> <li> Header \u2013 Customize the behavior of the header, add an announcement bar</li> <li> Footer \u2013 Add links to your social media profiles or websites in the footer</li> <li> Search \u2013 Set up and configure search, running entirely in the user's browser</li> <li> Tags \u2013 Categorize your pages with tags and group related pages</li> </ul>"},{"location":"setup/#appearance","title":"Appearance","text":"<p>Match your brand's colors, fonts, icons, logo, and more with a few lines of configuration \u2013 Material for MkDocs makes it easy to extend the basic configuration or alter the appearance.</p> <ul> <li> Colors Change colors with an existing color palette or customize with CSS</li> <li> Fonts \u2013 Choose among 1,000 Google Fonts or load self-hosted fonts</li> <li> Logo &amp; Icons \u2013 Change the logo, use any of the 8,000+ icons, or add new ones</li> <li> Social Cards \u2013 Automatically create social media previews when sharing links</li> </ul>"},{"location":"setup/#content","title":"Content","text":"<p>Create a blog, integrate a comment system, connect a git repository, and set up versioned documentation that matches your project's versioning methodology.</p> <ul> <li> Blog \u2013 Set up a standalone blog or host it alongside your documentation</li> <li> Comment System \u2013 Add a third-party comment system on any page or footer</li> <li> Versioning \u2013 Deploy multiple versions by integrating with external utilities</li> <li> Repository \u2013 Connect your documentation to your git repository</li> </ul>"},{"location":"setup/#optimization","title":"Optimization","text":"<p>Add site analytics and build an optimized site by adding automatic image compression, complying with GDPR data privacy regulations, and making it offline-capable.</p> <ul> <li> Site analytics \u2013 Learn how your users experience your documentation</li> <li> Optimized site \u2013 Create optimized sites that rank great on search engines</li> <li> Data Privacy \u2013 Ensure compliance with data privacy regulations</li> <li> Offline usage \u2013 Build an online and offline-capable documentation</li> </ul>"},{"location":"tutorials/","title":"Description","text":"<p>In addition to the basic getting started guides, we offer tutorials that aim to show how you can use Material for MkDocs in different use cases. In contrast to the getting started guides or the reference documentation, the tutorials show the breadth of features available in Material for MkDocs but also within the wider MkDocs ecosystem.</p> <p>The tutorials guide you through worked examples, so by following them you should gain not only an understanding of how to use Material for MkDocs, but also a template for your own projects. For convenience, these templates are also available as template repositories on GitHub.</p> <p>The tutorials assume that you have installed either the public version or the Insiders edition of Material for MkDocs and that you have worked through the creating your site setup guide.</p> <p>Note that where the features we use require the Insiders edition, we mark these with the heart icon:  If you are using the public version then you can skip these steps. Sometimes there will be ways of achieving the same goal that differ between the public version and the Insider edition. In that case, we will show them in a tabbed view so you can see one or the other.</p> <p>Feedback wanted!</p> <p>The tutorials are a recent addition to our documentation and we are still working out what shape they should have in the end. Please provide any feedback you might have in this discussion thread.</p> <p>Note, however, that suggestions should be specific and feasible. We want to focus on creating more content at the moment, instead of developing a specific styling or behaviour for the tutorials. If there are worthwhile improvements that we can make through simple customization then we are happy to consider those.</p>"},{"location":"tutorials/blogs/basic/","title":"Basic blogs","text":"<p>Blogs are a great way to engage with your audience. Software developers can use a blog to announce new features, demonstrate their usage and provide background information. You can demonstrate competence by commenting on the state of the art or document your own work as best practice. Posts on current topics can help draw in visitors for your main website and can keep your audience engaged. Of course, you can blog about any topics close to your heart.</p> <p>The blog plugin makes running a blog alongside your other content easy but you can also configure it to run a stand-alone blog if posts are the only kind of content you need.</p> <p>After a brief overview of the basic concepts of a blog, this tutorial guides you through the process of configuring the blog plugin, setting up your blog, creating posts, and defining post metadata.</p> <p>Time required: typically 20 minutes</p>"},{"location":"tutorials/blogs/basic/#key-concepts","title":"Key concepts","text":"<p>Post, excerpt: a blog consists of a number of self-contained posts (often called articles) and an index page that shows the posts in reverse chronological order, with the most recent post at the top. The index page usually shows only a short excerpt and a link that the user can click to navigate to the full post.</p> <p>Metadata: both the index page and the post itself list information such as when you published the post, when you updated it, who the author is, and what the expected reading time is.</p> <p>Slug: since the blog posts are primarily arranged by time and not into a hierarchy, their URLs do not reflect such a structure. Instead, each post's URL contains a shortened description, the slug, which is usually derived from the first heading in the post.</p> <p>Navigation: the main navigation structure is the timeline, which you can subdivide into categories. The main index page shows the more recent posts while an archive section allows access to older ones, organized by year. In addition, posts can be tagged and tag index pages provide an additional navigation structure based on content.</p> <p>You can see all these elements on the Material for MkDocs blog.</p>"},{"location":"tutorials/blogs/basic/#setting-up-your-blog","title":"Setting up your blog","text":"<p>The blog plugin is part of Material for MkDocs but you need to configure it in the <code>mkdocs.yml</code>.</p> <p>Set up a blog</p> <p>If you have not done so already, create a project for your blog, then edit the <code>mkdocs.yml</code> file to make sure if has the following content:</p> <pre><code>site_name: Blog Tutorial\nsite_description: an example blog set up following the tutorial\nsite_url: http://www.example.com\n\ntheme:\n  name: material\n\nplugins:\n  - search\n  - blog\n</code></pre> <p>The blog plugin will create a directory structure for your blog posts if it does not exist, so simply run <code>mkdocs serve</code> to get:</p> <pre><code>docs\n\u251c\u2500\u2500 blog\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 posts\n\u2514\u2500\u2500 index.md\n</code></pre> <p>Now create your first blog post in <code>docs/blog/posts</code>. You can use any naming convention and directory structure you like for your posts, as long as they are inside <code>docs/blog/posts</code>.</p> <p>Each post must have a page header, which appears at the top of the Markdown code between lines with three dashes. Within this header, you need to have at least a <code>date</code> entry but you can add other data, as you will see below. Following the header comes the page content. Note that it is important to have a level one heading as the plugin uses it to produce the slug. Also, by adding <code>&lt;!-- more --&gt;</code> to the page, you can define where the excerpt will end that the index page shows.</p> <p>Write your first post</p> <p>Create a file <code>docs/blog/posts/myfirst.md</code> with the following contents:</p> <pre><code>---\ndate:\n  created: 2023-12-31\n---\n\n# Happy new years eve!\n\nWe hope you are all having fun and wish you all the best for the new year!\n&lt;!-- more --&gt;\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\ntempor incididunt ut labore et dolore magna aliqua.\n</code></pre> <p>Then, run <code>mkdocs serve</code> and point your web browser at <code>http://localhost:8000/blog</code>.</p> <p>The blog plugin automatically creates navigation elements for the blog. The index page shows only the extract. When you select the \"Continue reading\" link, you will get to the full blog post. Note how it has a URL generated from the first-level heading.</p> <p>Navigation</p> <p>We also have a tutorial on navigation that shows you how to change the automatically created navigation and integrate the blog into your existing navigation structure. It shows how to create secondary navigation, produce author pages, and control pagination.</p>"},{"location":"tutorials/blogs/basic/#post-metadata","title":"Post metadata","text":"<p>In addition to the date, you can provide other metadata and give the plugin instructions, such as to treat a post as a draft or to pin it.</p>"},{"location":"tutorials/blogs/basic/#drafts","title":"Drafts","text":"<p>You may want to produce a draft of a blog post and work with it locally but exclude it from the build that you publish. Simply add a field to the page header to indicate that a post is still in draft form.</p> <p>Create a draft</p> <p>Create a second blog post in <code>docs/blogs/posts/draft.md</code> with the following contents:</p> <pre><code>---\ndate:\n  created: 2024-01-01\ndraft: true\n---\n\n# Happy new year!\n\nHappy 2024 to everyone. Wishing you all the best!\n&lt;!-- more --&gt;\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\ntempor incididunt ut labore et dolore magna aliqua.\n</code></pre> <p>Now, note how the draft appears on the index page but with a label that indicates that it is a draft. When you run <code>mkdocs build</code>, the draft will not appear in the output:</p> <pre><code>$ mkdocs build\n$ ls site/blog\nsite/blog\n\u251c\u2500\u2500 2023\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 12\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 31\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 happy-new-years-eve\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 index.html\n...\n</code></pre> <p>The first blog post for 2024 is not there yet because it is still in draft stage. Remember to remove the <code>draft</code> setting in the header when it is time to publish it.</p> <p>If you are using the [Insiders Edition], you can also create a folder to keep your drafts in and use the Meta plugin to add the <code>draft</code> header setting to all the posts in that folder. This has the advantage that it is easier to see which posts are still in draft form. We will cover the Meta plugin later on.</p>"},{"location":"tutorials/blogs/basic/#edits","title":"Edits","text":"<p>Sometimes, bloggers need to update a post. This might happen when you make a mistake or when something changes that you need to reflect in the post. To indicate you have edited a post, you can include an <code>updated</code> date in the page header.</p> <p>Editing a post</p> <p>Make a change to your first blog post, then add an edit date to the header:</p> <pre><code>---\ndate:\n  created: 2023-12-31\n  updated: 2024-01-02\n---\n</code></pre> <p>The Metadata section of the blog post itself will contain the edit date, though the index page omits this detail by default.</p>"},{"location":"tutorials/social/custom/","title":"Custom cards","text":"<p>The Insiders Edition allows you to define custom layouts for your social cards to suit your specific needs if the configuration options are not enough. For example, you may want to define a social card to advertise a new release of your product. It should have an icon indicating a launch announcement as well as the version number of the release on the card.</p>"},{"location":"tutorials/social/custom/#setup","title":"Setup","text":"<p>You can either design a custom layout from scratch or use an existing layout as the basis that you add to or otherwise modify. In this tutorial, you will use the default layout as the basis.</p> <p>Copy default layout to customize </p> <p>Copy the default social card layout from your installation of Material for MkDocs to a new directory <code>layouts</code>. The instructions below assume you are in your project root and have a virtual environment within this. The path on your machine, of course, may differ.</p> <pre><code>$ mkdir layouts\n$ cp venv/lib/python3.12/site-packages/material/plugins/social/templates/default/variant.yml \\\n  layouts/release.yml\n</code></pre> <p>Before customizing the social cards, you need to tell the plugin where to find them as well as tell MkDocs to watch for any changes. Add the following to the plugin configuration in your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - social:\n      cards_layout_dir: layouts\n\nwatch:\n  - layouts\n</code></pre> <p>Have a look at the contents of <code>release.yml</code>. You will see that there are:</p> <ul> <li>a number of definitions of content pulled from the site,</li> <li>definitions of tags that end up in the <code>meta</code> elements in the page header   of each page,</li> <li>a specification that consists of a number of layers that the social plugin   applies on top of each other in the order in which they are defined.</li> </ul>"},{"location":"tutorials/social/custom/#define-page-metadata","title":"Define page metadata","text":"<p>In the following, you will add a version number to the social card. This assumes you have a changelog page with information about each release. Add the version number of the latest version to the page header (so it does not need to be parsed out of the Markdown content):</p> <p>Defining the release data </p> <p>Create a page <code>docs/changelog.md</code> with the following content:</p> <pre><code>---\nicon: material/rocket-launch-outline\nsocial:\n  cards_layout: release\n  cards_layout_options:\n    title: New release!\nlatest: 1.2.3\n---\n\n# Releases\n</code></pre>"},{"location":"tutorials/social/custom/#extract-page-metadata","title":"Extract page metadata","text":"<p>With the data defined in the page header, you can now add code to the layout that pulls it out and makes it available to render later on. This is to separate the data manipulation from the actual layout instructions and so make the layout file easier to read.</p> <p>Adding data definitions</p> <p>Add the following at the top of the layout file:</p> <pre><code>definitions:\n  - &amp;latest &gt;-\n    {%- if 'latest' in page.meta %}\n        {{ page.meta['latest']}}\n    {%- else -%}\n        No release version data defined!\n    {%- endif -%}\n</code></pre> <p>The code presented here checks whether the page header contains the necessary entries and spits out a message to the social card if not. Unfortunately, there is no straightforward way to raise an exception or log an error, so the messages merely appear in the social card produced.</p>"},{"location":"tutorials/social/custom/#add-release-version-layer","title":"Add release version layer","text":"<p>The next step is to use these data definitions in a new layer and add it to the ones already present.</p> <p>Render release version</p> <p>Finally, add the following to end of the custom layout:</p> <pre><code>  - size: { width: 990, height: 50 }\n    offset: { x: 50, y: 360 }\n    typography:\n      content: *latest\n      align: start\n      color: *color\n</code></pre> <p>You should now see the social plugin use the custom layout on the changelog page you set up.</p>"},{"location":"tutorials/social/custom/#adjust-layout","title":"Adjust layout","text":"<p>Finally, the rocket icon used for the changelog page is not quite in the right position. Find the please where the <code>page_icon</code> variable is used to create the page icon layer and adjust the horizontal position to 600 instead of 800.</p> <p>Debugging layout files</p> <p>Should you find that your layouts are causing your MkDocs build to fail, there are a number of things you can do:</p> <ol> <li>Run Mkdocs with the <code>--verbose</code> option to get more detailed reporting.</li> <li>Comment out things you recently added or that you suspect are the cause</li> <li>Install the <code>jinja2</code> command-line tool with <code>pip install Jinja2</code> and    run it over your layout file, for example: <code>jinja2 event.yml</code>.</li> </ol>"}]}